# This workflow will build a Swift project and deploy it to an attached iPhone device
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift Build and Deploy

on:
  push:
    branches: [ "main" ]
    paths:
      - 'iOS/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'iOS/**'

# Important: Before using this workflow, you need to add the following secrets to your GitHub repository:
# IOS_BUILD_CERTIFICATE_BASE64: Your iOS certificate in base64 format
# IOS_P12_PASSWORD: Password for your p12 certificate file
# IOS_KEYCHAIN_PASSWORD: Password for the temporary keychain
# IOS_PROVISIONING_PROFILE_BASE64: Your iOS provisioning profile in base64 format
# IOS_DEVELOPER_APP_ID: Your app's unique identifier
# IOS_DEVELOPER_APP_IDENTIFIER: Your app's bundle identifier
# IOS_PROVISIONING_PROFILE_SPECIFIER: Name of the provisioning profile
# IOS_TEAM_ID: Your Apple Developer Team ID

jobs:
  build_and_deploy:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install Apple Certificate
      if: success()
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        
        # Import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
    
    - name: Install Provisioning Profile
      if: success()
      env:
        PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
      run: |
        # Create variables
        PROFILE_PATH=$RUNNER_TEMP/profile.mobileprovision
        
        # Import profile from secrets
        echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode -o $PROFILE_PATH
        
        # Make directory if it doesn't exist
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        
        # Copy profile
        cp $PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    
    - name: Build and Deploy to iPhone
      if: success()
      env:
        DEVELOPER_APP_ID: ${{ secrets.IOS_DEVELOPER_APP_ID }}
        DEVELOPER_APP_IDENTIFIER: ${{ secrets.IOS_DEVELOPER_APP_IDENTIFIER }}
        PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.IOS_PROVISIONING_PROFILE_SPECIFIER }}
        TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
      run: |
        cd iOS/StreamingMarkdown
        
        # Install dependencies if using CocoaPods or Swift Package Manager
        # pod install   # Uncomment if using CocoaPods
        
        # Create dynamic ExportOptions.plist file with environment variables
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>development</string>
            <key>teamID</key>
            <string>$TEAM_ID</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>$DEVELOPER_APP_IDENTIFIER</key>
                <string>$PROVISIONING_PROFILE_SPECIFIER</string>
            </dict>
        </dict>
        </plist>
        EOF
        
        # Build and deploy to connected iPhone
        xcodebuild clean archive -project StreamingMarkdown.xcodeproj -scheme StreamingMarkdown -destination "platform=iOS,name=iPhone" -archivePath $RUNNER_TEMP/StreamingMarkdown.xcarchive PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" DEVELOPMENT_TEAM="$TEAM_ID" CODE_SIGN_IDENTITY="iPhone Developer"
        
        # Install on device
        xcodebuild -archivePath $RUNNER_TEMP/StreamingMarkdown.xcarchive -exportArchive -exportPath $RUNNER_TEMP/build -exportOptionsPlist ExportOptions.plist
        
        # Install iOS deploy tool if not already available
        which ios-deploy || npm install -g ios-deploy
        
        # Deploy to the connected iPhone device
        ios-deploy --bundle $RUNNER_TEMP/build/StreamingMarkdown.ipa --id "iPhone" --justlaunch
